////////////////////////////////////////////////////////////////////////
//
// This file contains bpipe specific configuration parameters.
//
// By default, bpipe will run jobs on the same instance that bpipe
// is run on, but it can be configured to submit jobs to managers
// such as slurm and torque.
//
// This script is copied to bpipe.config by the "doit install" script
// that is run during the installation process.
//
////////////////////////////////////////////////////////////////////////
import groovy.io.FileType


// Include ngs utils to make them available to pipeline
def lib_list = new ArrayList<String>();
new File(System.getenv('CPIPE_ROOT').toString() + '/tools/java_libs').eachFileRecurse (FileType.FILES) { file ->
  lib_list.add(file.path.toString())
}
libs=lib_list.join(':')

{% if executor != 'none' %}
// --- global queue manager settings ---
// this section defines the type of queue, account details, and default job size

executor="{{ executor }}" // type of queue. "torque" and "pbspro" are also supported
account="{{ account }}"
walltime="08:00:00"

memory="8"
jobtype="single"
queue="{{ queue }}"

{# Executor-specific code #}
{% if executor == 'torque' %}
mem_param="mem"
custom="#PBS -V"
{% endif %}

// If you want notifications by instant message, customize this
// section. See http://docs.bpipe.org/Guides/Notifications/
// for more options

// notifications {
//   cpipe_operator {
//     to="your_account@gmail.com"
//     username="senderaccount@gmail.com"
//     password="thepassword"
//     events="STAGE_COMPLETED,FINISHED"
//     interval="60000"
//   }
// }

// --- Command specific configuration ---
// If a specific command requires different settings to the defaults above,
// see if it is listed in the list of commands below, and add the
// specific settings as required.
// 
// If the command is not listed below
// it may need to be added to the source code, as well as here.
// 
// An "exec" command needs to be associated with a name by adding the name
// to the end of the exec command. Refer to an existing
// command to see how that is done.
//
// These settings are generally appropriate for an exome analysis, however,
// you may need to adjust these values depending on your specific hardware.

commands {

	local {
		executor="local"
	}

	// --- helpers ---
	filter_variants {
			walltime="02:00:00"
	}

	merge_variants_gvcf {}

	merge_variants {
		walltime="02:00:00"
	}

	// --- alignment ---
	set_sample_info {
		walltime="00:30:00"
	}

	fastqc {
		walltime="02:00:00"
		memory="4"
	}

        // increase this if trimming is enabled
	trim_fastq {
		walltime="00:30:00"
	}

	bwamem {
		walltime="08:00:00"
		jobtype="single"
		procs=8
		memory="32"
	}

	index_bam {
        walltime="01:00:00"
		memory="4"
	}


	merge_bams {
		// walltime="12:00:00"
		// memory="16"
		walltime="12:00:00"
		memory="8"
	}

	dedup {
		walltime="10:00:00"
		memory="24"
	}

	realign_target_creator {
		memory="8"
		walltime="10:00:00"
	}

	local_realign {
		memory="16"
		walltime="14:00:00"
	}

	recalibrate_bam {
		walltime="14:00:00"
		memory="12"
	}

	count_covariates {
		walltime="10:00:00"
		memory="8"
	}

	// --- germline ---
	gatk_genotype {
		walltime="10:00:00"
		memory="24"
        procs=4
	}

	// --- initialize ---
	update_gene_lists {
		walltime="00:30:00"
	}
	create_combined_target {
		walltime="00:30:00"
	}
	create_synonymous_target {
		walltime="00:30:00"
	}
	build_capture_stats {
		walltime="04:00:00"
	}
	set_target_info {
		walltime="00:30:00"
	}
	sample_similarity_report {
		walltime="04:00:00"
	}
	validate_batch {
		walltime="00:30:00"
	}
	update_sample_database {
		walltime="00:30:00"
	}

	// --- reports ---
	calc_coverage_stats {
		walltime="04:00:00"
		memory="4"
	}

	check_ontarget_perc {
		walltime="04:00:00"
	}
	calculate_qc_statistics {
		walltime="04:00:00"
	}
	gatk_depth_of_coverage {
		walltime="06:00:00"
	}
	insert_size_metrics {
		walltime="04:00:00"
	}
	gap_report {
		walltime="04:00:00"
	}
	summary_report {
		walltime="04:00:00"
	}
	exon_qc_report {
		walltime="04:00:00"
	}
	qc_excel_report {
		memory="48"
		walltime="14:00:00"
		jobtype="smp" // to get exclusive node
	}
	filtered_on_exons {
		walltime="01:00:00"
	}
	variant_bams {
		walltime="04:00:00"
	}

	// --- trio ---
	genotype_refinement {
		walltime="04:00:00"
	}

	// --- variant analysis ---
	filter_tsv {
		walltime="01:00:00"
	}
	vcf_normalize {
		walltime="02:00:00"
	}
	vcf_filter_child {
		walltime="01:00:00"
	}
	vep {
		walltime="12:00:00"
		memory="48"
	}
	vcf_post_annotation_filter {
		walltime="01:00:00"
	}
	vcf_to_table {
		walltime="01:30:00"
	}
	annotate_custom_regions {
		walltime="00:30:00"
	}
	table_to_lovd {
		walltime="00:30:00"
	}
	transcript_filter {
		walltime="00:30:00"
	}
	vcfanno {
		walltime="00:30:00"
		memory="8"
	}

// --- variant calling ---
	// --- initialize ---
	update_gene_lists {
		walltime="00:30:00"
	}
	create_combined_target {
		walltime="00:30:00"
	}
	create_synonymous_target {
		walltime="00:30:00"
	}
	build_capture_stats {
		walltime="04:00:00"
	}
	set_target_info {
		walltime="00:30:00"
	}
	sample_similarity_report {
		walltime="04:00:00"
	}
	validate_batch {
		walltime="00:30:00"
	}
	update_sample_database {
		walltime="00:30:00"
	}

	// --- reports ---
	calc_coverage_stats {
		walltime="04:00:00"
		memory="4"
	}
	check_coverage {
		walltime="04:00:00"
		memory="12"
	}
	check_ontarget_perc {
		walltime="04:00:00"
	}
	calculate_qc_statistics {
		walltime="04:00:00"
	}
	gatk_depth_of_coverage {
		walltime="06:00:00"
	}
	insert_size_metrics {
		walltime="04:00:00"
	}
	gap_report {
		walltime="04:00:00"
	}
	summary_report {
		walltime="04:00:00"
	}
	exon_qc_report {
		walltime="04:00:00"
	}
	qc_excel_report {
		memory="48"
		walltime="14:00:00"
		jobtype="smp" // to get exclusive node
	}
	filtered_on_exons {
		walltime="01:00:00"
	}
	variant_bams {
		walltime="04:00:00"
	}

	// --- trio ---
	genotype_refinement {
		walltime="04:00:00"
	}

	// --- variant analysis ---
	filter_tsv {
		walltime="01:00:00"
	}
	vcf_normalize {
		walltime="02:00:00"
	}
	vcf_filter_child {
		walltime="01:00:00"
	}
	vep {
		walltime="12:00:00"
		memory="48"
	}
	vcfanno {
		walltime="00:30:00"
		memory="8"
	}
	vcf_post_annotation_filter {
		walltime="01:00:00"
	}
	vcf_to_table {
		walltime="01:30:00"
	}
	annotate_custom_regions {
		walltime="00:30:00"
	}
	table_to_lovd {
		walltime="00:30:00"
	}
	transcript_filter {
		walltime="00:30:00"
	}

	// --- variant calling ---
	gatk_call_variants {
		walltime="14:00:00"
		memory="12"
		procs=4
	}
}
{% endif %}
